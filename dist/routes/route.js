"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.comments = exports.postRouter = exports.router = void 0;
const express_1 = __importDefault(require("express"));
const auth_1 = require("../controllers/auth");
const auth_2 = require("../middlewares/auth");
const multer_1 = require("../utils/multer");
const post_1 = require("../controllers/post");
const followers_1 = require("../controllers/followers");
const like_1 = require("../controllers/like");
const comment_1 = require("../controllers/comment");
const client_1 = require("@prisma/client");
exports.router = express_1.default.Router();
exports.postRouter = express_1.default.Router();
exports.comments = express_1.default.Router();
const prisma = new client_1.PrismaClient();
exports.router.post("/register", multer_1.uploadAvatar.single("avatar"), auth_1.register);
exports.router.post("/login", auth_1.login);
exports.router.post("/logout", auth_1.logout);
exports.router.patch("/update-profile", auth_2.authenticate, multer_1.uploadAvatar.single("avatar"), auth_1.updateProfile);
exports.router.get("/profile", auth_2.authenticate, auth_1.getProfile);
exports.router.get("/search", auth_2.authenticate, auth_1.searchUsers);
exports.router.get("/user/:id", auth_2.authenticate, auth_1.getUserById);
exports.router.get("/followers/:userId", auth_2.authenticate, followers_1.getFollowers);
exports.router.get("/following/:userId", auth_2.authenticate, followers_1.getFollowing);
exports.router.get("/count-follow/:userId", auth_2.authenticate, followers_1.getFollowCount);
exports.router.post("/add-followers", auth_2.authenticate, followers_1.createFollowers);
exports.router.post("/add-following", auth_2.authenticate, followers_1.createFollowing);
exports.router.delete("/unfollow/:id", auth_2.authenticate, followers_1.unFollow);
exports.router.get("/suggested-users/:userId", auth_2.authenticate, followers_1.getSuggestedUsers);
exports.postRouter.post("/create", auth_2.authenticate, multer_1.uploadPostImage.single("posts"), post_1.createPost);
exports.postRouter.get("/", auth_2.authenticate, post_1.getAllPosts);
exports.postRouter.get("/:userId", auth_2.authenticate, post_1.getPostsByUserId);
exports.postRouter.get("/post-by-postId/:id", auth_2.authenticate, post_1.getPostById);
exports.postRouter.delete("/delete/:id", auth_2.authenticate, post_1.softDeletePost);
exports.postRouter.put("/update/:id", auth_2.authenticate, post_1.updatePost);
exports.postRouter.patch("/:id/restore", auth_2.authenticate, post_1.restorePost);
exports.postRouter.get("/count/:userId", auth_2.authenticate, post_1.getPostCount);
exports.postRouter.post("/:postId/like", auth_2.authenticate, like_1.likePost);
exports.postRouter.delete("/:postId/unlike", auth_2.authenticate, like_1.unlikePost);
exports.postRouter.get("/:postId/likes", auth_2.authenticate, like_1.getLikesByPost);
exports.comments.post("/", auth_2.authenticate, comment_1.createComment);
exports.comments.get("/:postId", auth_2.authenticate, comment_1.getCommentsByPost);
exports.comments.put("/update/:id", auth_2.authenticate, comment_1.updateComment);
exports.comments.delete("/delete/:id", auth_2.authenticate, comment_1.deleteComment);
